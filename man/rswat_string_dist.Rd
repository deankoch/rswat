% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rswat_utils.R
\name{rswat_string_dist}
\alias{rswat_string_dist}
\title{String distance ranking using \code{base::adist}}
\usage{
rswat_string_dist(
  pattern,
  lu,
  lu_split = FALSE,
  pattern_split = FALSE,
  split_c = 1e-06,
  costs = .rswat_gv_costs()
)
}
\arguments{
\item{pattern}{character vector, the search keyword string}

\item{lu}{character vector, a set of strings to compare with \code{pattern}}

\item{lu_split}{logical, whether to split \code{lu} at punctuation and whitespace (see details)}

\item{split_c}{numeric, a small positive regularization constant (for internal use)}

\item{costs}{named list, costs for the three types of string edits, passed to \code{base::adist}}
}
\value{
logical, indicating if the directory has been assigned
}
\description{
Scores the elements in character vector \code{lu} according to their similarity with \code{pattern}.
Lower scores are better matches, with minimum 0 indicating a perfect match.
}
\details{
All matching is case insensitive. When \code{lu_split=TRUE}, each entry of \code{lu} is split
at punctuation and white-space, and the function scores against each element separately.
The entire string is then assigned the score of the best matching element

Scores returned by the function satisfy the following:
\enumerate{
\item exact matches have score 0
\item exact matches with sub-strings of \code{lu} have score in (0,1)
\item approximate sub-string matches have score in [1, Inf)
}

Results in group (2) are ordered according the relative difference in string length
between \code{pattern} and the respective element of \code{lu} (after splitting). Results in group
(3) are ordered according to the ratio of the number of string edits (Levenstein distance)
to the string length of \code{pattern}.

The special search pattern '*' matches everything exactly (ie the function returns all 0s)

Pipe characters in \code{pattern} are treated as logical OR delimiters: \code{pattern} gets split
at the pipes, string distance is computed separately for each component, then the parallel
minimum is returned. \code{pattern} is also split at any white-space characters, and the component
distances are averaged in the result (to get an approximation to OR). Pipes are parsed first,
then white-space.
}
\examples{
# grab some text strings (table headers)
lu = .rswat_gv_cio_show()
lu

# compute distances. zero indicates exact match
rswat_string_dist('n_var', lu)

# sub-string is still the best match (but nonzero)
rswat_string_dist('var', lu)

# repeat with punctuation splitting turned on to get near-exact match
rswat_string_dist('var', lu, lu_split=TRUE)


}
