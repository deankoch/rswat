% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rswat_find.R
\name{rswat_fuzzy_search}
\alias{rswat_fuzzy_search}
\title{Fuzzy text search based on rswat_string_dist}
\usage{
rswat_fuzzy_search(
  pattern,
  lu,
  fuzzy = 5L,
  lu_split = FALSE,
  pattern_split = FALSE,
  quiet = FALSE
)
}
\arguments{
\item{pattern}{character vector, the keyword to search for}

\item{lu}{character vector, the strings to match against}

\item{fuzzy}{integer, controlling the number of results returned (see details)}

\item{lu_split}{logical, whether to split \code{lu} (see \code{?rswat_string_dist})}
}
\value{
data frame with columns 'order', 'distance', and 'name'
}
\description{
This calls \code{rswat_string_dist} (with default \code{costs}) to score how closely
\code{pattern} matches with elements of \code{lu}, then sorts \code{lu} (best matching first), and
returns a subset. To return more results, increase \code{fuzzy}.
}
\details{
For exact matches only, set \code{fuzzy=-1}. To also get results where \code{pattern} matches
sub-strings of \code{lu} exactly, set \code{fuzzy=0}. To get all of the above, plus the first
\code{fuzzy} approximate matches, set \code{fuzzy} to a positive integer.

Fuzzy matching is based on Levenstein distance and relative string lengths. See
\code{?rswat_string_dist} for documentation on the scoring function and \code{lu_split}.

The function returns results in a data frame, with 'order' indexing the input
\code{lu} sorted by least distance, 'distance' indicating the match strength (lower is
better), and 'name' indicating the string that was matched in \code{lu}.
}
\examples{
# grab some text strings (table headers)
lu = .rswat_gv_cio_show()
lu

# compute distances. zero indicates exact match, higher indicates approximate match
rswat_fuzzy_search('n_var', lu)

# search term can be a substring
rswat_fuzzy_search('var', lu)

# some ties resolved by ordering according to string length similarity
rswat_fuzzy_search('n', lu)

# repeat with punctuation splitting turned on to more closely match the 'n' prefix
rswat_fuzzy_search(pattern='n', lu, lu_split=TRUE)

# fuzzing can help with typos
rswat_fuzzy_search('n_bar', lu)
rswat_fuzzy_search('nvar', lu)

# false positives can happen due to length comparison
rswat_fuzzy_search('num_variables', lu)

# increase fuzzy to get more results
rswat_fuzzy_search('num_variables', lu, fuzzy=3)
rswat_fuzzy_search('num_variables', lu, fuzzy=5)

}
