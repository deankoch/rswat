% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rswat_find.R
\name{rswat_fuzzy_search}
\alias{rswat_fuzzy_search}
\title{Fuzzy text search for strings}
\usage{
rswat_fuzzy_search(
  pattern,
  name_df,
  name = "name",
  fuzzy = 0L,
  lu_split = FALSE,
  pattern_split = FALSE,
  quiet = FALSE,
  what = "header",
  .db = .rswat_db
)
}
\arguments{
\item{pattern}{character vector, the keyword to search for}

\item{name_df}{data frame, with column 'name' containing strings to search}

\item{name}{character, the column in \code{name_df} to search}

\item{fuzzy}{integer, controlling the number of results returned (see details)}

\item{lu_split}{logical, splits names at punctuation (passed to \code{rswat_string_dist})}

\item{pattern_split}{logical, splits patterns at punctuation (passed to \code{rswat_string_dist})}

\item{quiet}{logical, supresses console output}
}
\value{
A copy of \code{name_df} sorted by new column 'distance'
}
\description{
This calls \code{rswat_string_dist} to score how closely \code{pattern} matches with the
strings in the \code{name} column of \code{name_df}. The function appends a score to \code{name_df}
in column 'distance' (lower is better) and an integer column 'fuzzy' with values
in \code{c(-1, 0, 1)}, indicating the type of match (exact, sub-string, approximate).
}
\details{
Results are sorted from best to worst before returning, with row names indicating
the original order of \code{name_df}.

With \code{fuzzy=-1}, only exact matches are returned; With \code{fuzzy=0}, sub-string matches
are also returned; and \code{fuzzy>0} returns an additional \code{fuzzy} approximate results.

Fuzzy matching is based on Levenstein distance and relative string lengths.
\code{lu_split} and \code{pattern_split} control whether strings are split at punctuation
(with a small penalty to the score). See \code{?rswat_string_dist} for more information
on the scoring function.

For internal use: \code{name_df} can also be a character vector of file names to include
}
\examples{
# grab some text strings (table headers) and add another column
name_df = data.frame(name=.rswat_gv_cio_show())
name_df[['foo']] = paste0('bar_', seq(nrow(name_df)))

# compute distances. zero indicates exact match, higher indicates approximate match
rswat_fuzzy_search('n_var', name_df)

# search term can be a substring
rswat_fuzzy_search('var', name_df)
rswat_fuzzy_search('n', name_df)

# increase fuzzy to get more results
rswat_fuzzy_search('n_var', name_df, fuzzy=2)

# repeat with punctuation splitting turned on to more closely match the 'n' prefix
rswat_fuzzy_search('n', name_df, fuzzy=2, pattern_split=TRUE, lu_split=TRUE)

# fuzzing can help with typos
rswat_fuzzy_search('n_bar', name_df, fuzzy=1)
rswat_fuzzy_search('nvar', name_df, fuzzy=1)
rswat_fuzzy_search('num_vars', name_df, fuzzy=1)

# false positives can happen due to length comparison
rswat_fuzzy_search('number_of_variables', name_df, fuzzy=2)


}
